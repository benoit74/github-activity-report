[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "github_activity_report"
authors = [{ name = "benoit74", email = "benoit74@users.noreply.github.com" }]
keywords = ["github"]
requires-python = ">=3.12,<3.13"
description = "A really smart and exhaustive synthesis of Github activity"
readme = "README.md"
license = { text = "GPL-3.0-or-later" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]
dependencies = [
    "requests==2.31.0",
    "pydantic==2.6.1",
]
dynamic = ["version"]

[project.optional-dependencies]
scripts = [
  "invoke==2.2.0",
]
lint = [
  "black==24.1.1",
  "ruff==0.2.0",
]
check = [
  "pyright==1.1.350",
]
test = [
  "pytest==8.0.0",
  "coverage==7.4.1",
]
dev = [
    "pre-commit==3.6.0",
    "debugpy==1.8.0",
    "github_activity_report[scripts]",
    "github_activity_report[lint]",
    "github_activity_report[test]",
    "github_activity_report[check]",
]

[project.urls]
Homepage = "https://github.com/benoit74/github-activity-report"

[project.scripts]
github_activity_report = "github_activity_report:main.main"

[tool.hatch.version]
path = "src/github_activity_report/__about__.py"

[tool.hatch.build]
exclude = ["/.github"]

[tool.hatch.build.targets.wheel]
packages = ["src/github_activity_report"]

[tool.hatch.envs.default]
features = ["dev"]

[tool.hatch.envs.test]
features = ["scripts", "test"]

[tool.hatch.envs.test.scripts]
run = "inv test --args '{args}'"
run-cov = "inv test-cov --args '{args}'"
report-cov = "inv report-cov"
coverage = "inv coverage --args '{args}'"
html = "inv coverage --html --args '{args}'"

[tool.hatch.envs.lint]
template = "lint"
python = "py312"
skip-install = false
features = ["scripts", "lint"]

[tool.hatch.envs.lint.scripts]
black = "inv lint-black --args '{args}'"
ruff = "inv lint-ruff --args '{args}'"
all = "inv lintall --args '{args}'"
fix-black = "inv fix-black --args '{args}'"
fix-ruff = "inv fix-ruff --args '{args}'"
fixall = "inv fixall --args '{args}'"

[tool.hatch.envs.check]
features = ["scripts", "check"]

[tool.hatch.envs.check.scripts]
pyright = "inv check-pyright --args '{args}'"
all = "inv checkall --args '{args}'"

[tool.black]
line-length = 88
target-version = ['py312']

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
  "A",  # flake8-builtins
  # "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  # "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  # "BLE",  # flake8-blind-except
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  # "COM",  # flake8-commas
  # "D",  # pydocstyle
  # "DJ",  # flake8-django
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (default)
  "EM",  # flake8-errmsg
  # "ERA",  # eradicate
  # "EXE",  # flake8-executable
  "F",  # Pyflakes (default)
  # "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  # "FLY",  # flynt
  # "G",  # flake8-logging-format
  "I",  # isort
  "ICN",  # flake8-import-conventions
  # "INP",  # flake8-no-pep420
  # "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "N",  # pep8-naming
  # "NPY",  # NumPy-specific rules
  # "PD",  # pandas-vet
  # "PGH",  # pygrep-hooks
  # "PIE",  # flake8-pie
  # "PL",  # Pylint
  "PLC",  # Pylint: Convention
  "PLE",  # Pylint: Error
  "PLR",  # Pylint: Refactor
  "PLW",  # Pylint: Warning
  # "PT",  # flake8-pytest-style
  # "PTH",  # flake8-use-pathlib
  # "PYI",  # flake8-pyi
  "Q",  # flake8-quotes
  # "RET",  # flake8-return
  # "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  # "SIM",  # flake8-simplify
  # "SLF",  # flake8-self
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  # "TCH",  # flake8-type-checking
  # "TD",  # flake8-todos
  "TID",  # flake8-tidy-imports
  # "TRY",  # tryceratops
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow use of date.today
  "DTZ011",
  # Remove flake8-errmsg since we consider they bloat the code and provide limited value
  "EM",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore warnings on subprocess.run / popen
  "S603",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["github_activity_report"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pytest.ini_options]
minversion = "7.3"
testpaths = ["tests"]
pythonpath = [".", "src"]

[tool.coverage.paths]
great_project = ["src/github_activity_report"]
tests = ["tests"]

[tool.coverage.run]
source_pkgs = ["github_activity_report"]
branch = true
parallel = true
omit = [
  "src/github_activity_report/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pyright]
include = ["src", "tests", "tasks.py"]
exclude = ["**/__pycache__"]
extraPaths = ["src"]
pythonVersion = "3.12"
pythonPlatform = "All"
typeCheckingMode="strict"
